(function ($) {
    "use strict";


    jQuery(document).ready(function ($) {
        $(".menu-open").click(function () {
            $(".offcanvas-menu").addClass("activee");
        });

        $(".menu-close").click(function () {
            $(".offcanvas-menu").removeClass("activee");
        });

        $(".sldier-main").owlCarousel({
            items: 5,
            nav: true,
            navText: [
				'<img src="'+url_template+'assets/img/ar-left.png" alt="">',
				'<img src="'+url_template+'assets/img/ar-right.png" alt="">',
			],
            dot: true,
            loop: true,
            center: true,
            margin: 0,
            autoplay: false,
            autoplayTimeout: 3000,
            smartSpeed: 1000,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                },
                768: {
                    items: 2,
                },
                1000: {
                    items: 2,
                },
            },
        });
		
		$(".foto-gallery").owlCarousel({
            items: 4,
            nav: true,
            navText: [
				'<img src="'+url_template+'assets/img/ar-left.png" alt="">',
				'<img src="'+url_template+'assets/img/ar-right.png" alt="">',
			],
            dot: true,
            loop: false,
            center: false,
            margin: 15,
            autoplay: false,
            autoplayTimeout: 3000,
            smartSpeed: 1000,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
					loop: true,
					nav: false
                },
                768: {
                    items: 2,
                },
                1000: {
                    items: 4,
                },
            },
        });

        $(".rw-sldier").owlCarousel({
            items: 5,
            nav: false,
            dot: true,
            loop: true,
            center: true,
            margin: 10,
            autoplay: false,
            autoplayTimeout: 3000,
            smartSpeed: 1000,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                },
                768: {
                    items: 1,
                },
                1000: {
                    items: 1,
                },
            },
        });

        $(".arrow-down").click(function () {
            $("html, body").animate({
                    scrollTop: $("#slider-blk").offset().top,
                },
                1000
            );
        });

        $(".h-scroll-down").click(function () {
            $("html, body").animate({
                    scrollTop: $("#slider-blk").offset().top,
                },
                1000
            );
        });
       


    });

    jQuery(window).load(function () {


        // You can also pass an optional settings object
        // below listed default settings
        if(typeof AOS !== "undefined") AOS.init({
            // Global settings:
            disable: false, // accepts following values: 'phone', 'tablet', 'mobile', boolean, expression or function
            startEvent: "DOMContentLoaded", // name of the event dispatched on the document, that AOS should initialize on
            initClassName: "aos-init", // class applied after initialization
            animatedClassName: "aos-animate", // class applied on animation
            useClassNames: false, // if true, will add content of `data-aos` as classes on scroll
            disableMutationObserver: false, // disables automatic mutations' detections (advanced)
            debounceDelay: 50, // the delay on debounce used while resizing window (advanced)
            throttleDelay: 99, // the delay on throttle used while scrolling the page (advanced)

            // Settings that can be overridden on per-element basis, by `data-aos-*` attributes:
            offset: 120, // offset (in px) from the original trigger point
            delay: 0, // values from 0 to 3000, with step 50ms
            duration: 400, // values from 0 to 3000, with step 50ms
            easing: "ease", // default easing for AOS animations
            once: false, // whether animation should happen only once - while scrolling down
            mirror: false, // whether elements should animate out while scrolling past them
            anchorPlacement: "top-bottom", // defines which position of the element regarding to window should trigger the animation
        });
    });
})(jQuery);




/*!
 * classie - class helper functions
 * from bonzo https://github.com/ded/bonzo
 * 
 * classie.has( elem, 'my-class' ) -> true/false
 * classie.add( elem, 'my-new-class' )
 * classie.remove( elem, 'my-unwanted-class' )
 * classie.toggle( elem, 'my-class' )
 */

/*jshint browser: true, strict: true, undef: true */
/*global define: false */

( function( window ) {

'use strict';

// class helper functions from bonzo https://github.com/ded/bonzo

function classReg( className ) {
  return new RegExp("(^|\\s+)" + className + "(\\s+|$)");
}

// classList support for class management
// altho to be fair, the api sucks because it won't accept multiple classes at once
var hasClass, addClass, removeClass;

if ( 'classList' in document.documentElement ) {
  hasClass = function( elem, c ) {
    return elem.classList.contains( c );
  };
  addClass = function( elem, c ) {
    elem.classList.add( c );
  };
  removeClass = function( elem, c ) {
    elem.classList.remove( c );
  };
}
else {
  hasClass = function( elem, c ) {
    return classReg( c ).test( elem.className );
  };
  addClass = function( elem, c ) {
    if ( !hasClass( elem, c ) ) {
      elem.className = elem.className + ' ' + c;
    }
  };
  removeClass = function( elem, c ) {
    elem.className = elem.className.replace( classReg( c ), ' ' );
  };
}

function toggleClass( elem, c ) {
  var fn = hasClass( elem, c ) ? removeClass : addClass;
  fn( elem, c );
}

var classie = {
  // full names
  hasClass: hasClass,
  addClass: addClass,
  removeClass: removeClass,
  toggleClass: toggleClass,
  // short names
  has: hasClass,
  add: addClass,
  remove: removeClass,
  toggle: toggleClass
};

// transport
if ( typeof define === 'function' && define.amd ) {
  // AMD
  define( classie );
} else {
  // browser global
  window.classie = classie;
}

})( window );
/**
 * pathLoader.js v1.0.0
 * http://www.codrops.com
 *
 * Licensed under the MIT license.
 * http://www.opensource.org/licenses/mit-license.php
 * 
 * Copyright 2014, Codrops
 * http://www.codrops.com
 */
;( function( window ) {
	
	'use strict';

	function PathLoader( el ) {
		this.el = el;
		// clear stroke
		this.el.style.strokeDasharray = this.el.style.strokeDashoffset = this.el.getTotalLength();
	}

	PathLoader.prototype._draw = function( val ) {
		this.el.style.strokeDashoffset = this.el.getTotalLength() * ( 1 - val );
	}

	PathLoader.prototype.setProgress = function( val, callback ) {
		this._draw(val);
		if( callback && typeof callback === 'function' ) {
			// give it a time (ideally the same like the transition time) so that the last progress increment animation is still visible.
			setTimeout( callback, 200 );
		}
	}

	PathLoader.prototype.setProgressFn = function( fn ) {
		if( typeof fn === 'function' ) { fn( this ); }
	}

	// add to global namespace
	window.PathLoader = PathLoader;

})( window );
/**
 * main.js
 * http://www.codrops.com
 *
 * Licensed under the MIT license.
 * http://www.opensource.org/licenses/mit-license.php
 * 
 * Copyright 2014, Codrops
 * http://www.codrops.com
 */
(function() {

	var support = { animations : Modernizr.cssanimations },
		container = document.getElementById( 'ip-container' );

	if(container) {



          var  header = (typeof container !== "undefined")?container.querySelector( 'header.ip-header' ):null,
            loader = new PathLoader( document.getElementById( 'ip-loader-circle' ) ),
            animEndEventNames = { 'WebkitAnimation' : 'webkitAnimationEnd', 'OAnimation' : 'oAnimationEnd', 'msAnimation' : 'MSAnimationEnd', 'animation' : 'animationend' },
            // animation end event name
            animEndEventName = animEndEventNames[ Modernizr.prefixed( 'animation' ) ];

        function init() {
            var onEndInitialAnimation = function() {
                if( support.animations ) {
                    this.removeEventListener( animEndEventName, onEndInitialAnimation );
                }

                startLoading();
            };

            // disable scrolling
            window.addEventListener( 'scroll', noscroll );

            // initial animation
            classie.add( container, 'loading' );

            if( support.animations ) {
                container.addEventListener( animEndEventName, onEndInitialAnimation );
            }
            else {
                onEndInitialAnimation();
            }
        }

        function startLoading() {
            // simulate loading something..
            var simulationFn = function(instance) {
                var progress = 0,
                    interval = setInterval( function() {
                        progress = Math.min( progress + Math.random() * 0.1, 1 );

                        instance.setProgress( progress );

                        // reached the end
                        if( progress === 1 ) {
                            classie.remove( container, 'loading' );
                            classie.add( container, 'loaded' );
                            clearInterval( interval );

                            var onEndHeaderAnimation = function(ev) {
                                if( support.animations ) {
                                    if( ev.target !== header ) return;
                                    this.removeEventListener( animEndEventName, onEndHeaderAnimation );
                                }

                                classie.add( document.body, 'layout-switch' );
                                window.removeEventListener( 'scroll', noscroll );
                            };

                            if( support.animations ) {
                                header.addEventListener( animEndEventName, onEndHeaderAnimation );
                            }
                            else {
                                onEndHeaderAnimation();
                            }
                        }
                    }, 20 );
            };

            loader.setProgressFn( simulationFn );
        }

        function noscroll() {
            window.scrollTo( 0, 0 );
        }

        init();
    }
})();

if($("#secton-to-nav").length) {
    $("#secton-to-nav").onePageNav({
        currentClass: "current",
        scrollSpeed: 750,
        scrollThreshold: 0.5,
    });
}


const left = document.querySelector(".left");
const right = document.querySelector(".right");
const container = document.querySelector(".moveBg");
if(left && container) {
    left.addEventListener("mouseenter", function () {
        container.classList.add("hover-left");
    });
}
if(left && container) {
    left.addEventListener("mouseleave", function () {
        container.classList.remove("hover-left");
    });
}
if(right && container) {
    right.addEventListener("mouseenter", function () {
        container.classList.add("hover-right");
    });
}
if(right && container) {
    right.addEventListener("mouseleave", function () {
        container.classList.remove("hover-right");
    });
}